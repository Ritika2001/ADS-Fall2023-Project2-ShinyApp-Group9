labs(title = "Incident Types by State", x = "State", y = "Count") +
scale_fill_viridis_d("Incident Type")
ggplotly(gg_chart, tooltip = c("state", "incidentType", "y"))
ggplot(data, aes(x = state, group = incidentType)) +
geom_polygon(aes(y = after_stat(count)), fill = "lightblue", color = "blue") +
labs(title = "Incident Types by State", x = "State", y = "Count") +
theme_minimal() +
coord_polar(start = 0)
ggplot(data, aes(x = state, y = after_stat(count), group = incidentType)) +
geom_line(aes(color = incidentType)) +
labs(title = "Incident Types by State", x = "State", y = "Count") +
scale_color_viridis_d("Incident Type") +
theme_minimal() +
coord_polar(start = 0)
ggplot(data, aes(x = state, group = incidentType)) +
geom_line(aes(color = incidentType)) +
labs(title = "Incident Types by State", x = "State", y = "Count") +
scale_color_viridis_d("Incident Type") +
theme_minimal() +
coord_polar(start = 0)
ggplot(data, aes(x = state, y = after_stat(count), group = incidentType)) +
geom_line(aes(color = incidentType), size = 1) +
labs(title = "Incident Types by State", x = "State", y = "Count") +
scale_color_viridis_d("Incident Type") +
theme_minimal() +
coord_polar(start = 0)
ggplot(grouped_subset, aes(x = state, group = incidentType)) +
geom_polygon(aes(y = after_stat(count)), fill = "lightblue", color = "blue") +
labs(title = "Incident Types by State", x = "State", y = "Count") +
theme_minimal() +
coord_polar(start = 0)
grouped_subset_df = grouped_subset %>%
group_by(state,incidentType) %>%
summarize(
count = n()
)
View(grouped_subset_df)
ggplot(grouped_subset, aes(x = state, group = incidentType)) +
geom_polygon(aes(y = count), fill = "lightblue", color = "blue") +
labs(title = "Incident Types by State", x = "State", y = "Count") +
theme_minimal() +
coord_polar(start = 0)
ggplot(grouped_subset_df, aes(x = state, group = incidentType)) +
geom_polygon(aes(y = count), fill = "lightblue", color = "blue") +
labs(title = "Incident Types by State", x = "State", y = "Count") +
theme_minimal() +
coord_polar(start = 0)
ggplot(grouped_subset_df, aes(x = state, y = count, group = incidentType)) +
geom_line(aes(color = incidentType), size = 1) +
labs(title = "Incident Types by State", x = "State", y = "Count") +
scale_color_viridis_d("Incident Type") +
theme_minimal() +
coord_polar(start = 0)
ggplot(grouped_subset_df, aes(x = state, group = incidentType)) +
geom_polygon(aes(y = count), fill = "lightblue", color = "blue") +
labs(title = "Incident Types by State", x = "State", y = "Count") +
theme_minimal() +
coord_polar(start = 0)
runApp('app')
runApp('app')
library(shiny)
library(leaflet)
library(leaflet.extras)
library(dplyr)
library(magrittr)
library(mapview)
library(leafsync)
library(urbnmapr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
library(maps)
library(sf)
usgeo = st_read("./data/cb_2018_us_county_20m/cb_2018_us_county_20m.shp") %>%
mutate(fips = as.numeric(paste0(STATEFP, COUNTYFP)))
usgeo_county = sf::st_transform(usgeo, "+proj=longlat +datum=WGS84")
urlfile = "https://www.fema.gov/api/open/v2/DisasterDeclarationsSummaries.csv"
disaster_df = read.csv(urlfile)
disaster_df$FIPScode = paste0(
formatC(
disaster_df$fipsStateCode, width = 2, flag = "0"),
formatC(
disaster_df$fipsCountyCode, width = 3, flag = "0"))
disaster_df$startYear = substr(disaster_df$incidentBeginDate, 1, 4)
disaster_df$endYear = ifelse(
disaster_df$incidentEndDate != "" & disaster_df$incidentEndDate > disaster_df$declarationDate,
substr(disaster_df$incidentEndDate, 1, 4),
disaster_df$startYear
)
grouped_subset = subset(disaster_df, endYear <= 2023 & startYear >= 2023)
View(grouped_subset)
grouped_subset_state = subset(grouped_subset, state == "CA")
grouped_subset_state = grouped_subset_state %>%
left_join(usgeo, by = c("FIPScode" = "GEOID"))
View(grouped_subset_state)
View(grouped_subset_state)
grouped_subset_df = grouped_subset_state %>%
group_by(state,incidentType) %>%
summarize(
count = n()
)
View(grouped_subset_df)
View(grouped_subset_state)
grouped_subset_df = grouped_subset_state %>%
group_by(state,incidentType, NAME) %>%
summarize(
count = n()
)
View(grouped_subset_df)
library(plotly)
# Sample data
data <- data.frame(
state = c("CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA"),
incidentType = c("Flood", "Flood", "Fire", "Hurricane", "Flood", "Flood", "Flood", "Fire", "Flood", "Flood", "Flood", "Flood", "Flood", "Flood", "Flood", "Flood", "Flood", "Flood"),
county = c("Alameda", "Alpine", "Amador", "Butte", "Calaveras", "Colusa", "Contra Costa", "Del Norte", "El Dorado", "Fresno", "Glenn", "Humboldt", "Imperial", "Inyo", "Kern", "Kings", "Lake", "Los Angeles"),
value = c(1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2)
)
# Create a list to store traces
traces <- list()
# Define unique incident types
incident_types <- unique(data$incidentType)
# Loop through incident types and create traces
for (incident_type in incident_types) {
subset_data <- data[data$incidentType == incident_type, ]
trace <- plot_ly(subset_data, type = 'scatterpolar', mode = 'lines',
fill = 'toself',
name = incident_type,
r = subset_data$value,
theta = subset_data$county,
hoverinfo = 'name+r+theta')
traces <- append(traces, list(trace))
}
# Create the radar chart
radar_chart <- plot_ly() %>%
add_trace(data = traces[[1]]) %>%
add_trace(data = traces[[2]]) %>%
add_trace(data = traces[[3]]) %>%
layout(polar = list(radialaxis = list(visible = TRUE)))
# Display the radar chart
radar_chart
library(plotly)
# Sample data
data <- data.frame(
state = c("CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA", "CA"),
incidentType = c("Flood", "Flood", "Fire", "Hurricane", "Flood", "Flood", "Flood", "Fire", "Flood", "Flood", "Flood", "Flood", "Flood", "Flood", "Flood", "Flood", "Flood", "Flood"),
county = c("Alameda", "Alpine", "Amador", "Butte", "Calaveras", "Colusa", "Contra Costa", "Del Norte", "El Dorado", "Fresno", "Glenn", "Humboldt", "Imperial", "Inyo", "Kern", "Kings", "Lake", "Los Angeles"),
value = c(1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2)
)
# Create a list to store traces
traces <- list()
# Define unique incident types
incident_types <- unique(data$incidentType)
# Loop through incident types and create traces
for (incident_type in incident_types) {
subset_data <- data[data$incidentType == incident_type, ]
trace <- plot_ly(subset_data, type = 'scatter', mode = 'lines',
fill = 'toself',
name = incident_type,
r = subset_data$value,
theta = subset_data$county,
hoverinfo = 'name+r+theta')
traces <- append(traces, list(trace))
}
# Create the radar chart
radar_chart <- plot_ly() %>%
add_trace(data = traces[[1]]) %>%
add_trace(data = traces[[2]]) %>%
add_trace(data = traces[[3]]) %>%
layout(polar = list(radialaxis = list(visible = TRUE)))
# Display the radar chart
radar_chart
View(grouped_subset_state)
runApp('app')
runApp('app')
fig <- plot_ly(
type = 'scatterpolar',
fill = 'toself'
)
fig <- fig %>%
add_trace(
r = c(39, 28, 8, 7, 28, 39),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group A'
)
fig <- fig %>%
add_trace(
r = c(1.5, 10, 39, 31, 15, 1.5),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group B'
)
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,50)
)
)
)
fig
fig <- plot_ly(
type = 'scatterpolar',
fill = 'toself'
)
fig <- fig %>%
add_trace(
r = c(39, 28, 8, 7, 28, 39),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group A',
mode = "lines"
)
fig <- fig %>%
add_trace(
r = c(1.5, 10, 39, 31, 15, 1.5),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group B'
)
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,50)
)
)
)
fig
fig <- plot_ly(
type = 'scatterpolar',
fill = 'toself'
)
fig <- fig %>%
add_trace(
r = c(39, 28, 8, 7, 28, 39),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group A',
mode = "markers"
)
fig <- fig %>%
add_trace(
r = c(1.5, 10, 39, 31, 15, 1.5),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group B',
mode = "markers"
)
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,50)
)
)
)
fig
fig <- plot_ly(
type = 'scatterpolar',
fill = 'toself'
)
fig <- fig %>%
add_trace(
r = c(39, 28, 8, 7, 28, 39),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group A',
mode = "markers"
)
fig <- fig %>%
add_trace(
r = c(1.5, 10, 39, 31, 15, 1.5),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group B',
mode = "markers"
)
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,50),
mode = "markers"
)
)
)
fig
fig <- plot_ly(
type = 'scatterpolar',
fill = 'toself',
mode = "markers"
)
fig <- fig %>%
add_trace(
r = c(39, 28, 8, 7, 28, 39),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group A',
mode = "markers"
)
fig <- fig %>%
add_trace(
r = c(1.5, 10, 39, 31, 15, 1.5),
theta = c('A','B','C', 'D', 'E', 'A'),
name = 'Group B',
mode = "markers"
)
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,50)
)
)
)
fig
fig <- plot_ly(
type = 'scatterpolar',
fill = 'toself',
mode = "markers"
)
fig
library(shiny)
library(leaflet)
library(leaflet.extras)
library(dplyr)
library(magrittr)
library(mapview)
library(leafsync)
library(urbnmapr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
library(maps)
library(sf)
usgeo = st_read("./data/cb_2018_us_county_20m/cb_2018_us_county_20m.shp") %>%
mutate(fips = as.numeric(paste0(STATEFP, COUNTYFP)))
usgeo_county = sf::st_transform(usgeo, "+proj=longlat +datum=WGS84")
usgeo_state = st_read("./data/cb_2018_us_state_20m/cb_2018_us_state_20m.shp")
usgeo_state = sf::st_transform(usgeo_state, "+proj=longlat +datum=WGS84")
urlfile = "https://www.fema.gov/api/open/v2/DisasterDeclarationsSummaries.csv"
disaster_df = read.csv(urlfile)
disaster_df$FIPScode = paste0(
formatC(
disaster_df$fipsStateCode, width = 2, flag = "0"),
formatC(
disaster_df$fipsCountyCode, width = 3, flag = "0"))
disaster_df$startYear = substr(disaster_df$incidentBeginDate, 1, 4)
disaster_df$endYear = ifelse(
disaster_df$incidentEndDate != "" & disaster_df$incidentEndDate > disaster_df$declarationDate,
substr(disaster_df$incidentEndDate, 1, 4),
disaster_df$startYear
)
grouped_subset = subset(disaster_df, endYear <= 2023 & startYear >= 2023)
library(plotly)
grouped_subset_state = grouped_subset_state %>%
left_join(usgeo, by = c("FIPScode" = "GEOID"))
grouped_subset_state = subset(grouped_subset, state == "CA")
grouped_subset_state = grouped_subset_state %>%
left_join(usgeo, by = c("FIPScode" = "GEOID"))
grouped_subset_df = grouped_subset_state %>%
group_by(state,incidentType, NAME) %>%
summarize(
count = n()
)
View(grouped_subset_df)
fig <- plot_ly(
type = 'scatterpolar',
fill = 'toself',
mode = "markers"
)
fig <- fig %>%
add_trace(
r = grouped_subset_df$count,
theta = grouped_subset_df$NAME,
name = 'Group A',
mode = "markers"
)
fig
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,10)
)
)
)
fig
for (x in disaster_list) {
print(x)
}
disaster_list = unique(grouped_subset_df$incidentType)
for (x in disaster_list) {
print(x)
}
View(grouped_subset)
disaster_list = unique(grouped_subset_df$incidentType)
fig <- plot_ly(
type = 'scatterpolar',
fill = 'toself',
mode = "markers"
)
for (x in disaster_list) {
subset_df = subset(grouped_subset_df, incidentType == x)
fig <- fig %>%
add_trace(
r = grouped_subset_df$count,
theta = grouped_subset_df$NAME,
name = x,
mode = "markers"
)
}
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,5)
)
)
)
fig
max_count = max(grouped_subset_df$count)
max_count = (grouped_subset_df$count).max()
max_count = grouped_subset_df['count'].max()
View(grouped_subset_df)
grouped_subset_df['count']
grouped_subset_df['count'].max()
grouped_subset_df[['count']].max()
grouped_subset_df[[count]].max()
grouped_subset_df[["count"]].max()
grouped_subset_df["count"].max()
grouped_subset_df.max()
grouped_subset_df.max()
max(grouped_subset_df$count)
max_count = max(grouped_subset_df$count)
fig <- plot_ly(
type = 'scatterpolar',
fill = 'toself',
mode = "markers"
)
for (x in disaster_list) {
subset_df = subset(grouped_subset_df, incidentType == x)
fig <- fig %>%
add_trace(
r = grouped_subset_df$count,
theta = grouped_subset_df$NAME,
name = x,
mode = "markers"
)
}
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,max_count)
)
)
)
fig
for (x in disaster_list) {
subset_df = subset(grouped_subset_df, incidentType == x)
fig <- fig %>%
add_trace(
r = subset_df$count,
theta = subset_df$NAME,
name = x,
mode = "markers"
)
}
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,max_count)
)
)
)
fig
max_count = max(grouped_subset_df$count)
disaster_list = unique(grouped_subset_df$incidentType)
fig <- plot_ly(
type = 'scatterpolar',
fill = 'toself',
mode = "markers"
)
for (x in disaster_list) {
subset_df = subset(grouped_subset_df, incidentType == x)
fig <- fig %>%
add_trace(
r = subset_df$count,
theta = subset_df$NAME,
name = x,
mode = "markers",
marker = list(
colorscale = "viridis"  # Set Viridis color palette
)
)
}
fig <- fig %>%
layout(
polar = list(
radialaxis = list(
visible = T,
range = c(0,max_count)
)
)
)
fig
runApp('app')
